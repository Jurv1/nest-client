// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.3
//   protoc               v3.21.11
// source: src/proto/blog.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "blog";

export interface GetBlogRequest {
  id: number;
}

export interface GetBlogResponse {
  name: string;
}

export interface GetBlogsRequest {
  filter: string;
}

export interface GetBlogsResponse {
  name: string[];
}

export interface CreateBlogRequest {
  name: string;
}

export interface CreateBlogResponse {
  id: number;
  name: string;
}

function createBaseGetBlogRequest(): GetBlogRequest {
  return { id: 0 };
}

export const GetBlogRequest: MessageFns<GetBlogRequest> = {
  encode(message: GetBlogRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBlogRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBlogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBlogRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: GetBlogRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBlogRequest>, I>>(base?: I): GetBlogRequest {
    return GetBlogRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBlogRequest>, I>>(object: I): GetBlogRequest {
    const message = createBaseGetBlogRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetBlogResponse(): GetBlogResponse {
  return { name: "" };
}

export const GetBlogResponse: MessageFns<GetBlogResponse> = {
  encode(message: GetBlogResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBlogResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBlogResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBlogResponse {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetBlogResponse): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBlogResponse>, I>>(base?: I): GetBlogResponse {
    return GetBlogResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBlogResponse>, I>>(object: I): GetBlogResponse {
    const message = createBaseGetBlogResponse();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetBlogsRequest(): GetBlogsRequest {
  return { filter: "" };
}

export const GetBlogsRequest: MessageFns<GetBlogsRequest> = {
  encode(message: GetBlogsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== "") {
      writer.uint32(10).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBlogsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBlogsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBlogsRequest {
    return { filter: isSet(object.filter) ? globalThis.String(object.filter) : "" };
  },

  toJSON(message: GetBlogsRequest): unknown {
    const obj: any = {};
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBlogsRequest>, I>>(base?: I): GetBlogsRequest {
    return GetBlogsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBlogsRequest>, I>>(object: I): GetBlogsRequest {
    const message = createBaseGetBlogsRequest();
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseGetBlogsResponse(): GetBlogsResponse {
  return { name: [] };
}

export const GetBlogsResponse: MessageFns<GetBlogsResponse> = {
  encode(message: GetBlogsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.name) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBlogsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBlogsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBlogsResponse {
    return { name: globalThis.Array.isArray(object?.name) ? object.name.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: GetBlogsResponse): unknown {
    const obj: any = {};
    if (message.name?.length) {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBlogsResponse>, I>>(base?: I): GetBlogsResponse {
    return GetBlogsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBlogsResponse>, I>>(object: I): GetBlogsResponse {
    const message = createBaseGetBlogsResponse();
    message.name = object.name?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateBlogRequest(): CreateBlogRequest {
  return { name: "" };
}

export const CreateBlogRequest: MessageFns<CreateBlogRequest> = {
  encode(message: CreateBlogRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBlogRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBlogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBlogRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CreateBlogRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateBlogRequest>, I>>(base?: I): CreateBlogRequest {
    return CreateBlogRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateBlogRequest>, I>>(object: I): CreateBlogRequest {
    const message = createBaseCreateBlogRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateBlogResponse(): CreateBlogResponse {
  return { id: 0, name: "" };
}

export const CreateBlogResponse: MessageFns<CreateBlogResponse> = {
  encode(message: CreateBlogResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBlogResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBlogResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBlogResponse {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: CreateBlogResponse): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateBlogResponse>, I>>(base?: I): CreateBlogResponse {
    return CreateBlogResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateBlogResponse>, I>>(object: I): CreateBlogResponse {
    const message = createBaseCreateBlogResponse();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    return message;
  },
};

/** BLOG_SERVICE */
export interface BlogService {
  getBlog(request: GetBlogRequest): Promise<GetBlogResponse>;
  getBlogs(request: GetBlogsRequest): Promise<GetBlogsResponse>;
  createBlog(request: CreateBlogRequest): Promise<CreateBlogResponse>;
}

export const BlogServiceServiceName = "blog.BlogService";
export class BlogServiceClientImpl implements BlogService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || BlogServiceServiceName;
    this.rpc = rpc;
    this.getBlog = this.getBlog.bind(this);
    this.getBlogs = this.getBlogs.bind(this);
    this.createBlog = this.createBlog.bind(this);
  }
  getBlog(request: GetBlogRequest): Promise<GetBlogResponse> {
    const data = GetBlogRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetBlog", data);
    return promise.then((data) => GetBlogResponse.decode(new BinaryReader(data)));
  }

  getBlogs(request: GetBlogsRequest): Promise<GetBlogsResponse> {
    const data = GetBlogsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetBlogs", data);
    return promise.then((data) => GetBlogsResponse.decode(new BinaryReader(data)));
  }

  createBlog(request: CreateBlogRequest): Promise<CreateBlogResponse> {
    const data = CreateBlogRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateBlog", data);
    return promise.then((data) => CreateBlogResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
